<%
    # Based on: https://github.com/romainl/vim-rnb
    # Generate: erb -T - template/phk.erb > colors/phk.vim

    information = {
        author:      "Peter Horne-Khan",
        email:       "peter@horne-khan.com",
        name:        "phk",
        description: "Peter Horne Khan's colour scheme",
        webpage:     "https://github.com/peterhorne/colours"
    }

    black       = ["#000000", 0, "black"]
    darkred     = ["#e84033", 1, "darkred"]
    darkgreen   = ["#45a569", 2, "darkgreen"]
    darkyellow  = ["#f3b400", 3, "darkyellow"]
    darkblue    = ["#4179cc", 4, "darkblue"]
    darkmagenta = ["#c13eb9", 5, "darkmagenta"]
    darkcyan    = ["#57b7c5", 6, "darkcyan"]
    grey        = ["#f4f4f4", 7, "grey"]
    darkgrey    = ["#a1a1a1", 8, "darkgrey"]
    red         = ["#ec6554", 9, "red"]
    green       = ["#74aa74", 10, "green"]
    yellow      = ["#f7d17d", 11, "yellow"]
    blue        = ["#5189dc", 12, "blue"]
    magenta     = ["#d350ca", 13, "magenta"]
    cyan        = ["#6bd5e4", 14, "cyan"]
    white       = ["#ffffff", 15, "white"]

    highlights = [
        # Primary Highlights
        [ "Normal", white, black, "NONE" ],
        [ "NonText", "NONE", darkgrey, "NONE" ],
        [ "Comment", "NONE", darkblue, "NONE" ],
        [ "Error", "NONE", darkred, "NONE" ],
        [ "DiagnosticUnderlineError", "NONE", "NONE", "underline", darkred ],
        [ "Todo", "NONE", darkblue, "bold" ],
        [ "Underlined", "NONE", black, "underline" ],
        [ "Visual", yellow, "NONE", "NONE" ],
        [ "WarningMsg", "NONE", darkyellow, "NONE" ],
        [ "IncSearch", yellow, black, "bold" ],
        [ "Search", yellow, black, "NONE" ],
        [ "SpellBad", "NONE", "NONE", "undercurl", red ],
        [ "MatchParen", white, black, "bold" ], # TODO: come up with something prettier
        [ "CursorLine", "NONE", "NONE", "NONE" ],

        # Made up primary highlights
        [ "CommentBold", "NONE", darkblue, "bold" ],

        # Derivative Highlights
        [ "EndOfBuffer", "NonText" ],
        [ "Constant", "Normal" ],
        [ "Delimiter", "NonText" ],
        [ "Function", "Normal" ],
        [ "Identifier", "Normal" ],
        [ "Ignore", "Normal" ],
        [ "PreProc", "Normal" ],
        [ "Special", "NonText" ],
        [ "Statement", "NonText" ],
        [ "String", "Normal" ],
        [ "Number", "Normal" ],
        [ "Type", "Normal" ],
        [ "Operator", "NonText" ],
        [ "StatusLine", "NonText" ],
        [ "StatusLineNC", "StatusLine" ],
        [ "StatusLineTerm", "StatusLine" ],
        [ "StatusLineTermNC", "StatusLineNC" ],
        [ "WinSeparator", "StatusLine" ],
        [ "TabLine", "Normal" ],
        [ "TabLineFill", "Normal" ],
        [ "TabLineSel", "Normal" ],
        [ "Title", "Normal" ],
        [ "LineNr", "NonText" ],
        [ "CursorLineNr", "Normal" ],
        [ "helpLeadBlank", "Normal" ],
        [ "helpNormal", "Normal" ],
        [ "VisualNOS", "Normal" ],
        [ "Pmenu", "Normal" ],
        [ "PmenuSbar", "Normal" ],
        [ "PmenuSel", "Normal" ],
        [ "PmenuThumb", "Normal" ],
        [ "FoldColumn", "Normal" ],
        [ "WildMenu", "Normal" ],
        [ "Folded", "Normal" ],
        [ "SpecialKey", "Normal" ],
        [ "DiffAdd", "Normal" ],
        [ "DiffChange", "Normal" ],
        [ "DiffDelete", "Normal" ],
        [ "DiffText", "Normal" ],
        [ "CurSearch", "Search" ],
        [ "Directory", "Normal" ],
        [ "SpellCap", "SpellBad" ],
        [ "SpellLocal", "SpellBad" ],
        [ "SpellRare", "SpellBad" ],
        [ "ColorColumn", "Normal" ],
        [ "SignColumn", "Normal" ],
        [ "ErrorMsg", "Error" ],
        [ "ModeMsg", "Normal" ],
        [ "MoreMsg", "Normal" ],
        [ "Question", "Normal" ],
        [ "WarningMsg", "Error" ],
        [ "Cursor", "Normal" ],
        [ "CursorIM", "Cursor" ],
        [ "CursorColumn", "Normal" ],
        [ "QuickFixLine", "Normal" ],
        [ "Terminal", "Normal" ],
        [ "Conceal", "Normal" ],
        [ "ToolbarLine", "Normal" ],
        [ "ToolbarButton", "Normal" ],
        [ "debugPC", "Normal" ],
        [ "debugBreakpoint", "Normal" ],
        [ "CursorLineFold", "Normal" ],
        [ "CursorLineSign", "Normal" ],
        [ "LineNrAbove", "Normal" ],
        [ "LineNrBelow", "Normal" ],
        [ "MsgArea", "Normal" ],
        [ "MsgSeparator", "Normal" ],
        [ "NormalNC", "Normal" ],
        [ "PmenuExtra", "Normal" ],
        [ "PmenuExtraSel", "Normal" ],
        [ "PmenuKind", "Normal" ],
        [ "PmenuKindSel", "Normal" ],
        [ "SnippetTabstop", "Normal" ],
        [ "Substitute", "Normal" ],
        [ "TermCursor", "Normal" ],
        [ "TermCursorNC", "Normal" ],
        [ "Whitespace", "Normal" ],
        [ "WinBar", "Normal" ],
        [ "WinBarNC", "Normal" ],
        [ "lCursor", "Normal" ],
        [ "DiagnosticError", "Error" ],

        # Diagnostics
        [ "DiagnosticError", "NONE", darkred, "NONE" ],
        [ "DiagnosticWarn", "NONE", darkyellow, "NONE" ],
        [ "DiagnosticInfo", "NONE", darkcyan, "NONE" ],
        [ "DiagnosticHint", "NONE", darkmagenta, "NONE" ],
        [ "DiagnosticOk", "NONE", "darkgreen", "NONE" ],

        # UI
        [ "NormalFloat", grey, "NONE", "NONE" ],
        [ "FloatBorder", "NONE", "NONE", "NONE" ],
        [ "FloatTitle", "NONE", "NONE", "NONE" ],
        [ "FloatFooter", "NONE", "NONE", "NONE" ],

        # Treesitter
        [ "@variable", "Normal" ], # various variable names
        [ "@variable.builtin", "Normal" ], # built-in variable names (e.g. `this`, `self`)
        [ "@variable.parameter", "Normal" ], # parameters of a function
        [ "@variable.parameter.builtin", "Normal" ], # special parameters (e.g. `_`, `it`)
        [ "@variable.member", "Normal" ], # object and struct fields

        [ "@constant", "Normal" ], # constant identifiers
        [ "@constant.builtin", "Normal" ], # built-in constant values
        [ "@constant.macro", "Normal" ], # constants defined by the preprocessor

        [ "@module", "Normal" ], # modules or namespaces
        [ "@module.builtin", "Normal" ], # built-in modules or namespaces
        [ "@label", "Normal" ], # `GOTO` and other labels (e.g. `label:` in C), including heredoc labels

        [ "@string", "Normal" ], # string literals
        [ "@string.documentation", "Normal" ], # string documenting code (e.g. Python docstrings)
        [ "@string.regexp", "Normal" ], # regular expressions
        [ "@string.escape", "Normal" ], # escape sequences
        [ "@string.special", "Normal" ], # other special strings (e.g. dates)
        [ "@string.special.symbol", "Normal" ], # symbols or atoms
        [ "@string.special.path", "Normal" ], # filenames
        [ "@string.special.url", "Normal" ], # URIs (e.g. hyperlinks)

        [ "@character", "Normal" ], # character literals
        [ "@character.special", "Normal" ], # special characters (e.g. wildcards)

        [ "@boolean", "Normal" ], # boolean literals
        [ "@number", "Normal" ], # numeric literals
        [ "@number.float", "Normal" ], # floating-point number literals

        [ "@type", "Normal" ], # type or class definitions and annotations
        [ "@type.builtin", "Normal" ], # built-in types
        [ "@type.definition", "Normal" ], # identifiers in type definitions (e.g. `typedef <type> <identifier>` in C)

        [ "@attribute", "Normal" ], # attribute annotations (e.g. Python decorators, Rust lifetimes)
        [ "@attribute.builtin", "Normal" ], # builtin annotations (e.g. `@property` in Python)
        [ "@property", "Normal" ], # the key in key/value pairs

        [ "@function", "Normal" ], # function definitions
        [ "@function.builtin", "Normal" ], # built-in functions
        [ "@function.call", "Normal" ], # function calls
        [ "@function.macro", "Normal" ], # preprocessor macros

        [ "@function.method", "Normal" ], # method definitions
        [ "@function.method.call", "Normal" ], # method calls

        [ "@constructor", "NonText" ], # constructor calls and definitions
        [ "@operator", "NonText" ], # symbolic operators (e.g. `+`, `*`)

        [ "@keyword", "NonText" ], # keywords not fitting into specific categories
        [ "@keyword.coroutine", "NonText" ], # keywords related to coroutines (e.g. `go` in Go, `async/await` in Python)
        [ "@keyword.function", "NonText" ], # keywords that define a function (e.g. `func` in Go, `def` in Python)
        [ "@keyword.operator", "NonText" ], # operators that are English words (e.g. `and`, `or`)
        [ "@keyword.import", "NonText" ], # keywords for including modules (e.g. `import`, `from` in Python)
        [ "@keyword.type", "NonText" ], # keywords defining composite types (e.g. `struct`, `enum`)
        [ "@keyword.modifier", "NonText" ], # keywords defining type modifiers (e.g. `const`, `static`, `public`)
        [ "@keyword.repeat", "NonText" ], # keywords related to loops (e.g. `for`, `while`)
        [ "@keyword.return", "NonText" ], # keywords like `return` and `yield`
        [ "@keyword.debug", "NonText" ], # keywords related to debugging
        [ "@keyword.exception", "NonText" ], # keywords related to exceptions (e.g. `throw`, `catch`)
        [ "@keyword.conditional", "NonText" ], # keywords related to conditionals (e.g. `if`, `else`)
        [ "@keyword.conditional.ternary", "NonText" ], # operator (e.g. `?`, `:`)
        [ "@keyword.directive", "NonText" ], # various preprocessor directives and shebangs
        [ "@keyword.directive.define", "NonText" ], # preprocessor definition directives

        [ "@punctuation.delimiter", "NonText" ], # delimiters (e.g. `;`, `.`, `,`)
        [ "@punctuation.bracket", "NonText" ], # brackets (e.g. `()`, `{}`, `[]`)
        [ "@punctuation.special", "NonText" ], # special symbols (e.g. `{}` in string interpolation)

        [ "@comment", "Comment" ], # line and block comments
        [ "@comment.documentation", "Comment" ], # comments documenting code

        [ "@comment.error", "CommentBold" ], # error-type comments (e.g. `ERROR`, `FIXME`, `DEPRECATED`)
        [ "@comment.warning", "CommentBold" ], # warning-type comments (e.g. `WARNING`, `FIX`, `HACK`)
        [ "@comment.todo", "CommentBold" ], # todo-type comments (e.g. `TODO`, `WIP`)
        [ "@comment.note", "CommentBold" ], # note-type comments (e.g. `NOTE`, `INFO`, `XXX`)

        [ "@markup.strong", "Normal" ], # bold text
        [ "@markup.italic", "Normal" ], # italic text
        [ "@markup.strikethrough", "Normal" ], # struck-through text
        [ "@markup.underline", "Normal" ], # underlined text (only for literal underline markup!)

        [ "@markup.heading", "Normal" ], # headings, titles (including markers)
        [ "@markup.heading.1", "Normal" ], # top-level heading
        [ "@markup.heading.2", "Normal" ], # section heading
        [ "@markup.heading.3", "Normal" ], # subsection heading
        [ "@markup.heading.4", "Normal" ], # and so on
        [ "@markup.heading.5", "Normal" ], # and so forth
        [ "@markup.heading.6", "Normal" ], # six levels ought to be enough for anybody

        [ "@markup.quote", "Normal" ], # block quotes
        [ "@markup.math", "Normal" ], # math environments (e.g. `$ ... $` in LaTeX)

        [ "@markup.link", "Normal" ], # text references, footnotes, citations, etc.
        [ "@markup.link.label", "Normal" ], # link, reference descriptions
        [ "@markup.link.url", "Normal" ], # URL-style links

        [ "@markup.raw", "Normal" ], # literal or verbatim text (e.g. inline code)
        [ "@markup.raw.block", "Normal" ], # literal or verbatim text as a stand-alone block

        [ "@markup.list", "Normal" ], # list markers
        [ "@markup.list.checked", "Normal" ], # checked todo-style list markers
        [ "@markup.list.unchecked", "Normal" ], # unchecked todo-style list markers

        [ "@diff.plus", "Normal" ], # added text (for diff files)
        [ "@diff.minus", "Normal" ], # deleted text (for diff files)
        [ "@diff.delta", "Normal" ], # changed text (for diff files)

        [ "@tag", "Normal" ], # XML-style tag names (e.g. in XML, HTML, etc.)
        [ "@tag.builtin", "Normal" ], # XML-style tag names (e.g. HTML5 tags)
        [ "@tag.attribute", "Normal" ], # XML-style tag attributes
        [ "@tag.delimiter", "Normal" ], # XML-style tag delimiters

        # NERDTree
        [ "Directory", "Comment" ],
        [ "NERDTreeDirSlash", "Comment" ],
    ]

    terminal_ansi_colors = [
        black,
        darkred,
        darkgreen,
        darkyellow,
        darkblue,
        darkmagenta,
        darkcyan,
        grey,
        darkgrey,
        red,
        green,
        yellow,
        blue,
        magenta,
        cyan,
        white
    ]

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Webpage:     <%= information[:webpage] %>
" Description: <%= information[:description] %>
" Last Change: <%= Time.new.strftime "%Y-%m-%d" %>

hi clear

if exists("syntax_on")
  syntax reset
endif

let colors_name = "<%= information[:name].downcase %>"

if ($TERM =~ '256' || &t_Co >= 256) || has("gui_running")
<% highlights.each do |highlight| -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% highlights.each do |highlight| -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% links.each do |link| -%>
hi! link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
if (has('termguicolors') && &termguicolors) || has('gui_running')
    let g:terminal_ansi_colors = [ <%= terminal_ansi_colors.map { |color| "'#{color[0]}'" }.join(', ') %> ]
endif
<% end -%>
